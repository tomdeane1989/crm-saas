generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            Int         @id @default(autoincrement())
  externalId    String?     @unique
  name          String
  industry      String?
  website       String?
  customFields  Json?       // JSONB for user-defined fields
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  contacts      Contact[]
  opportunities Opportunity[]
  activities    Activity[]

  @@index([externalId])
  @@index([name])
}

model Contact {
  id            Int       @id @default(autoincrement())
  externalId    String?   @unique
  firstName     String
  lastName      String
  email         String?   @unique
  phone         String?
  role          String?
  customFields  Json?
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  activities    Activity[]
  opportunities Opportunity[]
  
  @@index([externalId])
  @@index([email])
}

model Opportunity {
  id            Int       @id @default(autoincrement())
  externalId    String?   @unique
  title         String
  amount        Float?
  status        String
  closeDate     DateTime?
  customFields  Json?
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     Int
  contact       Contact?  @relation(fields: [contactId], references: [id])
  contactId     Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  activities    Activity[]

  @@index([externalId])
  @@index([status])
  @@index([closeDate])
}

model Activity {
  id            Int       @id @default(autoincrement())
  type          String    // e.g. call, email, meeting
  details       String?
  occurredAt    DateTime  @default(now())
  customFields  Json?

  company       Company   @relation(fields: [companyId], references: [id])
  companyId     Int
  contact       Contact?  @relation(fields: [contactId], references: [id])
  contactId     Int?
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id])
  opportunityId Int?

  createdAt     DateTime  @default(now())

  @@index([type])
  @@index([occurredAt])
}

model Embedding {
  id         Int      @id @default(autoincrement())
  model      String   // e.g. "text-embedding-ada-002"
  vector     Float[]  // raw float array for later vector extension
  metadata   Json?    // e.g. { "entity": "Opportunity", "entityId": 42 }
  createdAt  DateTime @default(now())

  @@index([model])
  @@index([createdAt])
}

model PromptLog {
  id          Int      @id @default(autoincrement())
  model       String
  prompt      String   @db.Text
  response    String   @db.Text
  tokensUsed  Int
  createdAt   DateTime @default(now())

  @@index([model])
  @@index([createdAt])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("user") // user, admin
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}